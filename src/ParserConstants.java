/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int STRING_LITERAL = 1;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 8;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 9;
  /** RegularExpression Id. */
  int HEX_LITERAL = 10;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 11;
  /** RegularExpression Id. */
  int END = 12;
  /** RegularExpression Id. */
  int BLOCK_START = 13;
  /** RegularExpression Id. */
  int BLOCK_END = 14;
  /** RegularExpression Id. */
  int FUNCTION = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int ELIF = 18;
  /** RegularExpression Id. */
  int PRINT = 19;
  /** RegularExpression Id. */
  int PRINTF = 20;
  /** RegularExpression Id. */
  int RANDOM = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int RETURN = 23;
  /** RegularExpression Id. */
  int TRUE = 24;
  /** RegularExpression Id. */
  int FALSE = 25;
  /** RegularExpression Id. */
  int INT = 26;
  /** RegularExpression Id. */
  int FLOAT = 27;
  /** RegularExpression Id. */
  int STRING = 28;
  /** RegularExpression Id. */
  int BOOLEAN = 29;
  /** RegularExpression Id. */
  int EQUAL = 30;
  /** RegularExpression Id. */
  int NOT_EQUAL = 31;
  /** RegularExpression Id. */
  int LESS = 32;
  /** RegularExpression Id. */
  int LESS_EQUAL = 33;
  /** RegularExpression Id. */
  int GREATER = 34;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 35;
  /** RegularExpression Id. */
  int ASSIGNMENT = 36;
  /** RegularExpression Id. */
  int NOT = 37;
  /** RegularExpression Id. */
  int ADD = 38;
  /** RegularExpression Id. */
  int SUB = 39;
  /** RegularExpression Id. */
  int MUL = 40;
  /** RegularExpression Id. */
  int DIV = 41;
  /** RegularExpression Id. */
  int MOD = 42;
  /** RegularExpression Id. */
  int FUNC_IDENTIFIER = 43;
  /** RegularExpression Id. */
  int IDENTIFIER = 44;
  /** RegularExpression Id. */
  int LETTER = 45;
  /** RegularExpression Id. */
  int DIGIT = 46;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<STRING_LITERAL>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"function\"",
    "\"if\"",
    "\"else\"",
    "\"elif\"",
    "\"print\"",
    "\"printf\"",
    "\"random\"",
    "\"while\"",
    "\"return\"",
    "\"true\"",
    "\"false\"",
    "\"int\"",
    "\"float\"",
    "\"string\"",
    "\"boolean\"",
    "<EQUAL>",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"=\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "<FUNC_IDENTIFIER>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\")\"",
    "\"(\"",
    "\",\"",
  };

}
