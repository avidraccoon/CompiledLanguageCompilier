/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\Parser.jj */
/*@egen*/options {
             
  KEEP_LINE_COLUMN = false;
}


PARSER_BEGIN(Parser)

/**
 * An Arithmetic Grammar.
 */

import java.io.FileInputStream;
import java.util.ArrayList;
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
  public static ASTStart root;
  /** Main entry point. */
  public static void Parse() {
    System.out.println("Reading from standard input...");
    try {
        Parser t = new Parser(new FileInputStream("../code.txt"));
        //t.printAllTokens();
        try {
          root = t.Start();
          root.dump("");
          System.out.println("Thank you.");
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
          t.printAllTokens();
        }
    } catch (Exception e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        //e.printStackTrace();
    }
  }

  public void printAllTokens() throws ParseException {
     Token t;
     int limit = 10;
     int count = 0;
     do {
         t = this.getNextToken();
         System.out.println("Token: " + t.image + " Kind: " + t.kind + " Value:" + t.getValue() +
         " ToString: " + t.toString());
         count++;
     } while (limit > count);
  }
}



PARSER_END(Parser)


//String Literal
TOKEN :
{
 <STRING_LITERAL: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
}

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* other LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN :
{
  < END: ";">
|
  < BLOCK_START: "{">
|
  < BLOCK_END: "}">
}

TOKEN : /* Keywords */
{
    <FUNCTION: "function">
|
    <IF: "if">
|
    <ELSE: "else">
|
    <ELIF: "elif">
|
    <PRINT: "print">
|
    <PRINTF: "printf">
|
    <RANDOM: "random">
|
    <WHILE: "while">
|
    <RETURN: "return">
|
    <TRUE: "true">
|
    <FALSE: "false">
}

TOKEN : /* TYPES */
{
  < INT: "int">
|
  < FLOAT: "float">
|
  < STRING: "string">
|
  < BOOLEAN: "boolean">
}

TOKEN : /* Operators */
{
    < EQUAL : <ASSIGNMENT><ASSIGNMENT>>
|
    < NOT_EQUAL : "!=" >
|
    < LESS : "<" >
|
    < LESS_EQUAL : "<=" >
|
    < GREATER : ">" >
|
    < GREATER_EQUAL : ">=" >
|
    < ASSIGNMENT : "=">
|
    < NOT : "!" >
|
    < ADD : "+" >
|
    < SUB : "-" >
|
    < MUL : "*" >
|
    < DIV : "/" >
|
    < MOD : "%" >
}

TOKEN : /* IDENTIFIERS */
{
  < FUNC_IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* "(" >
|
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}




ASTStart Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  //<END>
  //(Line())*
  (Line())*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Line()       : {}
{
    LOOKAHEAD(2)
    Var_Declar()
|
    Var_Assignment()
|
    (Function_Call() <END>)
}

void Block() : {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
     try {
/*@egen*/
     <BLOCK_START>(Line())*<BLOCK_END>/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void Var_Declar()       : {}
{/*@bgen(jjtree) Var_Declar */
    {
      ASTVar_Declar jjtn001 = new ASTVar_Declar(JJTVAR_DECLAR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ((Identifier() | <INT> | <BOOLEAN> | <FLOAT> | <STRING> ) Identifier()<END>)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/           
}

void Var_Assignment()       : {}
{/*@bgen(jjtree) Var_Assign */
    {
      ASTVar_Assign jjtn002 = new ASTVar_Assign(JJTVAR_ASSIGN);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    (Identifier() <ASSIGNMENT>/*@bgen(jjtree) Value */
                              {
                                ASTValue jjtn001 = new ASTValue(JJTVALUE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/Expression()/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/      <END>)/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/           
}

void Function_Call() : {/*@bgen(jjtree) Function_Call */
    ASTFunction_Call jjtn000 = new ASTFunction_Call(JJTFUNCTION_CALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Function_Call */
    try {
/*@egen*//*@bgen(jjtree) FunctionCall */
    {
      ASTFunctionCall jjtn001 = new ASTFunctionCall(JJTFUNCTIONCALL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
    t=<FUNC_IDENTIFIER>{jjtn001.jjtSetValue(t.image);}
    Parameters()
    ")"
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/             /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression()       : {}
{
    ArithmeticExpression()
}

void ArithmeticExpression()       : {}
{/*@bgen(jjtree) AddSub */
    {
      ASTAddSub jjtn001 = new ASTAddSub(JJTADDSUB);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Term() ((<ADD>{jjtn001.jjtSetValue("Add");} | <SUB>{jjtn001.jjtSetValue("Sub");}) Term())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       
}

void Term()       : {}
{/*@bgen(jjtree) MulDivMod */
 {
   ASTMulDivMod jjtn001 = new ASTMulDivMod(JJTMULDIVMOD);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (Factor() ((<MUL> | <DIV> | <MOD>) Factor())*)/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
 }
/*@egen*/          
}

void Factor()       : {}
{
 Value()
| (<"("> ArithmeticExpression() <")">)
}


void Parameters() : {/*@bgen(jjtree) Parameters */
  ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parameters */
    try {
/*@egen*/
    [Parameter()] ("," Parameter())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Parameter() : {/*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parameter */
    try {
/*@egen*/
    (Identifier() | <INT> | <BOOLEAN> | <FLOAT> | <STRING> ) Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Value()       : {}
{
    Integer()
|
    Identifier()
|
    Function_Call()
}

void Identifier() : {/*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    t=<IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Integer() :{/*@bgen(jjtree) Integer */
 ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) Integer */
    try {
/*@egen*/
    t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}